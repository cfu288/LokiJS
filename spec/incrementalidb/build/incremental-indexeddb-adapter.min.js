(()=>{var __getOwnPropNames=Object.getOwnPropertyNames;var __commonJS=(cb,mod)=>function __require(){return mod||(0,cb[__getOwnPropNames(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var require_incremental_indexeddb_adapter=__commonJS({"src/incremental-indexeddb-adapter.js"(exports,module){(function(root,factory){if(typeof define==="function"&&define.amd){define([],factory)}else if(typeof exports==="object"){module.exports=factory()}else{root.IncrementalIndexedDBAdapter=factory()}})(exports,function(){return function(){"use strict";var DEBUG=typeof window!=="undefined"&&!!window.__loki_incremental_idb_debug;function IncrementalIndexedDBAdapter(options){this.mode="incremental";this.options=options||{};this.chunkSize=100;this.megachunkCount=this.options.megachunkCount||24;this.lazyCollections=this.options.lazyCollections||[];this.idb=null;this._prevLokiVersionId=null;this._prevCollectionVersionIds={};if(!(this.megachunkCount>=4&&this.megachunkCount%2===0)){throw new Error("megachunkCount must be >=4 and divisible by 2")}}IncrementalIndexedDBAdapter.prototype._getChunk=function(collection,chunkId){var minId=chunkId*this.chunkSize;var maxId=minId+this.chunkSize-1;collection.ensureId();var idIndex=collection.idIndex;var firstDataPosition=null;var max=idIndex.length-1,min=0,mid;while(idIndex[min]<idIndex[max]){mid=min+max>>1;if(idIndex[mid]<minId){min=mid+1}else{max=mid}}if(max===min&&idIndex[min]>=minId&&idIndex[min]<=maxId){firstDataPosition=min}if(firstDataPosition===null){return[]}var lastDataPosition=null;for(var i=firstDataPosition+this.chunkSize-1;i>=firstDataPosition;i--){if(idIndex[i]<=maxId){lastDataPosition=i;break}}var firstElement=collection.data[firstDataPosition];if(!(firstElement&&firstElement.$loki>=minId&&firstElement.$loki<=maxId)){throw new Error("broken invariant firstelement")}var lastElement=collection.data[lastDataPosition];if(!(lastElement&&lastElement.$loki>=minId&&lastElement.$loki<=maxId)){throw new Error("broken invariant lastElement")}var chunkData=collection.data.slice(firstDataPosition,lastDataPosition+1);if(chunkData.length>this.chunkSize){throw new Error("broken invariant - chunk size")}return chunkData};IncrementalIndexedDBAdapter.prototype.saveDatabase=function(dbname,getLokiCopy,callback){var that=this;if(!this.idb){this._initializeIDB(dbname,callback,function(){that.saveDatabase(dbname,getLokiCopy,callback)});return}if(this.operationInProgress){throw new Error("Error while saving to database - another operation is already in progress. Please use throttledSaves=true option on Loki object")}this.operationInProgress=true;DEBUG&&console.log("saveDatabase - begin");DEBUG&&console.time("saveDatabase");function finish(e){DEBUG&&e&&console.error(e);DEBUG&&console.timeEnd("saveDatabase");that.operationInProgress=false;callback(e)}try{var updatePrevVersionIds=function(){console.error("Unexpected successful tx - cannot update previous version ids")};var didOverwrite=false;var tx=this.idb.transaction(["LokiIncrementalData"],"readwrite");tx.oncomplete=function(){updatePrevVersionIds();finish();if(didOverwrite&&that.options.onDidOverwrite){that.options.onDidOverwrite()}};tx.onerror=function(e){finish(e)};tx.onabort=function(e){finish(e)};var store=tx.objectStore("LokiIncrementalData");var performSave=function(maxChunkIds){try{var incremental=!maxChunkIds;var chunkInfo=that._putInChunks(store,getLokiCopy(),incremental,maxChunkIds);updatePrevVersionIds=function(){that._prevLokiVersionId=chunkInfo.lokiVersionId;chunkInfo.collectionVersionIds.forEach(function(collectionInfo){that._prevCollectionVersionIds[collectionInfo.name]=collectionInfo.versionId})};tx.commit&&tx.commit()}catch(error){console.error("idb performSave failed: ",error);tx.abort()}};var getAllKeysThenSave=function(){idbReq(store.getAllKeys(),function(e){var maxChunkIds=getMaxChunkIds(e.target.result);performSave(maxChunkIds)},function(e){console.error("Getting all keys failed: ",e);tx.abort()})};var getLokiThenSave=function(){idbReq(store.get("loki"),function(e){if(lokiChunkVersionId(e.target.result)===that._prevLokiVersionId){performSave()}else{DEBUG&&console.warn("Another writer changed Loki IDB, using slow path...");didOverwrite=true;getAllKeysThenSave()}},function(e){console.error("Getting loki chunk failed: ",e);tx.abort()})};getLokiThenSave()}catch(error){finish(error)}};function getMaxChunkIds(allKeys){var maxChunkIds={};allKeys.forEach(function(key){var keySegments=key.split(".");if(keySegments.length===3&&keySegments[1]==="chunk"){var collection=keySegments[0];var chunkId=parseInt(keySegments[2])||0;var currentMax=maxChunkIds[collection];if(!currentMax||chunkId>currentMax){maxChunkIds[collection]=chunkId}}});return maxChunkIds}function lokiChunkVersionId(chunk){try{if(chunk){var loki=JSON.parse(chunk.value);return loki.idbVersionId||null}else{return null}}catch(e){console.error("Error while parsing loki chunk",e);return null}}IncrementalIndexedDBAdapter.prototype._putInChunks=function(idbStore,loki,incremental,maxChunkIds){var that=this;var collectionVersionIds=[];var savedSize=0;var prepareCollection=function(collection,i){var dirtyChunks=new Set;incremental&&collection.dirtyIds.forEach(function(lokiId){var chunkId=lokiId/that.chunkSize|0;dirtyChunks.add(chunkId)});collection.dirtyIds=[];var prepareChunk=function(chunkId){var chunkData=that._getChunk(collection,chunkId);if(that.options.serializeChunk){chunkData=that.options.serializeChunk(collection.name,chunkData)}chunkData=JSON.stringify(chunkData);savedSize+=chunkData.length;DEBUG&&incremental&&console.log("Saving: "+collection.name+".chunk."+chunkId);idbStore.put({key:collection.name+".chunk."+chunkId,value:chunkData})};if(incremental){dirtyChunks.forEach(prepareChunk)}else{var maxChunkId=collection.maxId/that.chunkSize|0;for(var j=0;j<=maxChunkId;j+=1){prepareChunk(j)}var persistedMaxChunkId=maxChunkIds[collection.name]||0;for(var k=maxChunkId+1;k<=persistedMaxChunkId;k+=1){var deletedChunkName=collection.name+".chunk."+k;idbStore.delete(deletedChunkName);DEBUG&&console.warn("Deleted chunk: "+deletedChunkName)}}if(collection.dirty||dirtyChunks.size||!incremental){collection.idIndex=[];collection.data=[];collection.idbVersionId=randomVersionId();collectionVersionIds.push({name:collection.name,versionId:collection.idbVersionId});var metadataChunk=JSON.stringify(collection);savedSize+=metadataChunk.length;DEBUG&&incremental&&console.log("Saving: "+collection.name+".metadata");idbStore.put({key:collection.name+".metadata",value:metadataChunk})}loki.collections[i]={name:collection.name}};loki.collections.forEach(prepareCollection);loki.idbVersionId=randomVersionId();var serializedMetadata=JSON.stringify(loki);savedSize+=serializedMetadata.length;DEBUG&&incremental&&console.log("Saving: loki");idbStore.put({key:"loki",value:serializedMetadata});DEBUG&&console.log("saved size: "+savedSize);return{lokiVersionId:loki.idbVersionId,collectionVersionIds}};IncrementalIndexedDBAdapter.prototype.loadDatabase=function(dbname,callback){var that=this;if(this.operationInProgress){throw new Error("Error while loading database - another operation is already in progress. Please use throttledSaves=true option on Loki object")}this.operationInProgress=true;DEBUG&&console.log("loadDatabase - begin");DEBUG&&console.time("loadDatabase");var finish=function(value){DEBUG&&console.timeEnd("loadDatabase");that.operationInProgress=false;callback(value)};this._getAllChunks(dbname,function(chunks){try{if(!Array.isArray(chunks)){throw chunks}if(!chunks.length){return finish(null)}DEBUG&&console.log("Found chunks:",chunks.length);chunks=chunksToMap(chunks);var loki=chunks.loki;chunks.loki=null;populateLoki(loki,chunks.chunkMap,that.options.deserializeChunk,that.lazyCollections);chunks=null;that._prevLokiVersionId=loki.idbVersionId||null;that._prevCollectionVersionIds={};loki.collections.forEach(function(collection){that._prevCollectionVersionIds[collection.name]=collection.idbVersionId||null});return finish(loki)}catch(error){that._prevLokiVersionId=null;that._prevCollectionVersionIds={};return finish(error)}})};function chunksToMap(chunks){var loki;var chunkMap={};sortChunksInPlace(chunks);chunks.forEach(function(chunk){var type=chunk.type;var value=chunk.value;var name=chunk.collectionName;if(type==="loki"){loki=value}else if(type==="data"){if(chunkMap[name]){chunkMap[name].dataChunks.push(value)}else{chunkMap[name]={metadata:null,dataChunks:[value]}}}else if(type==="metadata"){if(chunkMap[name]){chunkMap[name].metadata=value}else{chunkMap[name]={metadata:value,dataChunks:[]}}}else{throw new Error("unreachable")}});if(!loki){throw new Error("Corrupted database - missing database metadata")}return{loki,chunkMap}}function populateLoki(loki,chunkMap,deserializeChunk,lazyCollections){loki.collections.forEach(function populateCollection(collectionStub,i){var name=collectionStub.name;var chunkCollection=chunkMap[name];if(chunkCollection){if(!chunkCollection.metadata){throw new Error("Corrupted database - missing metadata chunk for "+name)}var collection=chunkCollection.metadata;chunkCollection.metadata=null;loki.collections[i]=collection;var isLazy=lazyCollections.includes(name);var lokiDeserializeCollectionChunks=function(){DEBUG&&isLazy&&console.log("lazy loading "+name);var data=[];var dataChunks=chunkCollection.dataChunks;dataChunks.forEach(function populateChunk(chunk,i2){if(isLazy){chunk=JSON.parse(chunk);if(deserializeChunk){chunk=deserializeChunk(name,chunk)}}chunk.forEach(function(doc){data.push(doc)});dataChunks[i2]=null});return data};collection.getData=lokiDeserializeCollectionChunks}})}IncrementalIndexedDBAdapter.prototype._initializeIDB=function(dbname,onError,onSuccess){var that=this;DEBUG&&console.log("initializing idb");if(this.idbInitInProgress){throw new Error("Cannot open IndexedDB because open is already in progress")}this.idbInitInProgress=true;var openRequest=indexedDB.open(dbname,1);openRequest.onupgradeneeded=function(e){var db=e.target.result;DEBUG&&console.log("onupgradeneeded, old version: "+e.oldVersion);if(e.oldVersion<1){db.createObjectStore("LokiIncrementalData",{keyPath:"key"})}else{throw new Error("Invalid old version "+e.oldVersion+" for IndexedDB upgrade")}};openRequest.onsuccess=function(e){that.idbInitInProgress=false;var db=e.target.result;that.idb=db;if(!db.objectStoreNames.contains("LokiIncrementalData")){onError(new Error("Missing LokiIncrementalData"));that.deleteDatabase(dbname);return}DEBUG&&console.log("init success");db.onversionchange=function(versionChangeEvent){if(that.idb!==db){return}DEBUG&&console.log("IDB version change",versionChangeEvent);that.idb.close();that.idb=null;if(that.options.onversionchange){that.options.onversionchange(versionChangeEvent)}};onSuccess()};openRequest.onblocked=function(e){console.error("IndexedDB open is blocked",e);onError(new Error("IndexedDB open is blocked by open connection"))};openRequest.onerror=function(e){that.idbInitInProgress=false;console.error("IndexedDB open error",e);onError(e)}};IncrementalIndexedDBAdapter.prototype._getAllChunks=function(dbname,callback){var that=this;if(!this.idb){this._initializeIDB(dbname,callback,function(){that._getAllChunks(dbname,callback)});return}var tx=this.idb.transaction(["LokiIncrementalData"],"readonly");var store=tx.objectStore("LokiIncrementalData");var deserializeChunk=this.options.deserializeChunk;var lazyCollections=this.lazyCollections;function getMegachunks(keys){var megachunkCount=that.megachunkCount;var keyRanges=createKeyRanges(keys,megachunkCount);var allChunks=[];var megachunksReceived=0;function processMegachunk(e,megachunkIndex,keyRange){var megachunk=e.target.result;megachunk.forEach(function(chunk,i2){parseChunk(chunk,deserializeChunk,lazyCollections);allChunks.push(chunk);megachunk[i2]=null});megachunksReceived+=1;if(megachunksReceived===megachunkCount){callback(allChunks)}}var megachunkWaves=2;var megachunksPerWave=megachunkCount/megachunkWaves;function requestMegachunk(index,wave){var keyRange=keyRanges[index];idbReq(store.getAll(keyRange),function(e){if(wave<megachunkWaves){requestMegachunk(index+megachunksPerWave,wave+1)}processMegachunk(e,index,keyRange)},function(e){callback(e)})}for(var i=0;i<megachunksPerWave;i+=1){requestMegachunk(i,1)}}function getAllChunks(){idbReq(store.getAll(),function(e){var allChunks=e.target.result;allChunks.forEach(function(chunk){parseChunk(chunk,deserializeChunk,lazyCollections)});callback(allChunks)},function(e){callback(e)})}function getAllKeys(){function onDidGetKeys(keys){keys.sort();if(keys.length>100){getMegachunks(keys)}else{getAllChunks()}}idbReq(store.getAllKeys(),function(e){onDidGetKeys(e.target.result)},function(e){callback(e)});if(that.options.onFetchStart){that.options.onFetchStart()}}getAllKeys()};function classifyChunk(chunk){var key=chunk.key;if(key==="loki"){chunk.type="loki";return}else if(key.includes(".")){var keySegments=key.split(".");if(keySegments.length===3&&keySegments[1]==="chunk"){chunk.type="data";chunk.collectionName=keySegments[0];chunk.index=parseInt(keySegments[2],10);return}else if(keySegments.length===2&&keySegments[1]==="metadata"){chunk.type="metadata";chunk.collectionName=keySegments[0];return}}console.error("Unknown chunk "+key);throw new Error("Corrupted database - unknown chunk found")}function parseChunk(chunk,deserializeChunk,lazyCollections){classifyChunk(chunk);var isData=chunk.type==="data";var isLazy=lazyCollections.includes(chunk.collectionName);if(!(isData&&isLazy)){chunk.value=JSON.parse(chunk.value)}if(deserializeChunk&&isData&&!isLazy){chunk.value=deserializeChunk(chunk.collectionName,chunk.value)}}IncrementalIndexedDBAdapter.prototype.deleteDatabase=function(dbname,callback){if(this.operationInProgress){throw new Error("Error while deleting database - another operation is already in progress. Please use throttledSaves=true option on Loki object")}this.operationInProgress=true;var that=this;DEBUG&&console.log("deleteDatabase - begin");DEBUG&&console.time("deleteDatabase");this._prevLokiVersionId=null;this._prevCollectionVersionIds={};if(this.idb){this.idb.close();this.idb=null}var request=indexedDB.deleteDatabase(dbname);request.onsuccess=function(){that.operationInProgress=false;DEBUG&&console.timeEnd("deleteDatabase");callback({success:true})};request.onerror=function(e){that.operationInProgress=false;console.error("Error while deleting database",e);callback({success:false})};request.onblocked=function(e){console.error("Deleting database failed because it's blocked by another connection",e)}};function randomVersionId(){return Math.random().toString(36).substring(2)}function sortChunksInPlace(chunks){chunks.sort(function(a,b){return(a.index||0)-(b.index||0)})}function createKeyRanges(keys,count){var countPerRange=Math.floor(keys.length/count);var keyRanges=[];var minKey,maxKey;for(var i=0;i<count;i+=1){minKey=keys[countPerRange*i];maxKey=keys[countPerRange*(i+1)];if(i===0){keyRanges.push(IDBKeyRange.upperBound(maxKey,true))}else if(i===count-1){keyRanges.push(IDBKeyRange.lowerBound(minKey))}else{keyRanges.push(IDBKeyRange.bound(minKey,maxKey,false,true))}}return keyRanges}function idbReq(request,onsuccess,onerror){request.onsuccess=function(e){try{return onsuccess(e)}catch(error){onerror(error)}};request.onerror=onerror;return request}return IncrementalIndexedDBAdapter}()})}});require_incremental_indexeddb_adapter();})();
//# sourceMappingURL=incremental-indexeddb-adapter.min.js.map
