{
  "version": 3,
  "sources": ["../../src/storage-adapter/fs-adapter.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable no-prototype-builtins */\n/* eslint-disable no-var */\n/**\n * A loki persistence adapter which persists using node fs module\n * @constructor LokiFsAdapter\n */\n\nimport Sylvie from \"../modules/sylvie\";\nimport { PersistenceAdapter } from \"./persistence-adapter\";\n\nexport class FsAdapter implements PersistenceAdapter {\n  fs: any;\n  constructor() {\n    try {\n      this.fs = require(\"fs\");\n    } catch (e) {\n      this.fs = null;\n    }\n  }\n  mode: string;\n  exportDatabase(\n    dbname: string,\n    dbref: typeof Sylvie,\n    callback: (err: Error) => void\n  ): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /** loadDatabase() - Load data from file, will throw an error if the file does not exist\n   * @param {string} dbname - the filename of the database to load\n   * @param {function} callback - the callback to handle the result\n   * @memberof LokiFsAdapter\n   */\n  loadDatabase(dbname: string, callback: (value: any) => void): void {\n    const self = this;\n\n    this.fs.stat(dbname, (err, stats) => {\n      if (!err && stats.isFile()) {\n        self.fs.readFile(\n          dbname,\n          {\n            encoding: \"utf8\",\n          },\n          function readFileCallback(err, data) {\n            if (err) {\n              callback(new Error(err));\n            } else {\n              callback(data);\n            }\n          }\n        );\n      } else {\n        callback(null);\n      }\n    });\n  }\n\n  /**\n   * saveDatabase() - save data to file, will throw an error if the file can't be saved\n   * might want to expand this to avoid dataloss on partial save\n   * @param {string} dbname - the filename of the database to load\n   * @param {function} callback - the callback to handle the result\n   * @memberof LokiFsAdapter\n   */\n  saveDatabase(dbname, dbstring, callback) {\n    const self = this;\n    const tmpdbname = `${dbname}~`;\n    this.fs.writeFile(tmpdbname, dbstring, function writeFileCallback(err) {\n      if (err) {\n        callback(new Error(err));\n      } else {\n        self.fs.rename(tmpdbname, dbname, callback);\n      }\n    });\n  }\n\n  /**\n   * deleteDatabase() - delete the database file, will throw an error if the\n   * file can't be deleted\n   * @param {string} dbname - the filename of the database to delete\n   * @param {function} callback - the callback to handle the result\n   * @memberof LokiFsAdapter\n   */\n  deleteDatabase(dbname, callback) {\n    this.fs.unlink(dbname, function deleteDatabaseCallback(err) {\n      if (err) {\n        callback(new Error(err));\n      } else {\n        callback();\n      }\n    });\n  }\n}\n"],
  "mappings": "wUAWO,IAAMA,EAAN,KAA8C,CAEnD,aAAc,CACZ,GAAI,CACF,KAAK,GAAK,EAAQ,IAAI,CACxB,OAAS,EAAP,CACA,KAAK,GAAK,IACZ,CACF,CAEA,eACEC,EACAC,EACAC,EACM,CACN,MAAM,IAAI,MAAM,yBAAyB,CAC3C,CAOA,aAAaF,EAAgBE,EAAsC,CACjE,IAAMC,EAAO,KAEb,KAAK,GAAG,KAAKH,EAAQ,CAACI,EAAKC,IAAU,CAC/B,CAACD,GAAOC,EAAM,OAAO,EACvBF,EAAK,GAAG,SACNH,EACA,CACE,SAAU,MACZ,EACAM,EAAA,SAA0BF,EAAKG,EAAM,CAEjCL,EADEE,EACO,IAAI,MAAMA,CAAG,EAEbG,CAFc,CAI3B,EANA,mBAOF,EAEAL,EAAS,IAAI,CAEjB,CAAC,CACH,CASA,aAAaF,EAAQQ,EAAUN,EAAU,CACvC,IAAMC,EAAO,KACPM,EAAY,GAAGT,KACrB,KAAK,GAAG,UAAUS,EAAWD,EAAUF,EAAA,SAA2BF,EAAK,CACjEA,EACFF,EAAS,IAAI,MAAME,CAAG,CAAC,EAEvBD,EAAK,GAAG,OAAOM,EAAWT,EAAQE,CAAQ,CAE9C,EANuC,oBAMtC,CACH,CASA,eAAeF,EAAQE,EAAU,CAC/B,KAAK,GAAG,OAAOF,EAAQM,EAAA,SAAgCF,EAAK,CACtDA,EACFF,EAAS,IAAI,MAAME,CAAG,CAAC,EAEvBF,EAAS,CAEb,EANuB,yBAMtB,CACH,CACF,EAlFaI,EAAAP,EAAA",
  "names": ["FsAdapter", "dbname", "dbref", "callback", "self", "err", "stats", "__name", "data", "dbstring", "tmpdbname"]
}
